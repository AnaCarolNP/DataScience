{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Parabéns!\n","\n","Você foi contratado para trabalhar no RH de um empresa Multinacional como trainee! Na sua primeira semana, você vai trabalhar no RH.\n","\n","Sua primeira demanda é criar um sistema que cumpra os seguintes requisitos:\n","\n","- Seu sistema deverá armazenar os registros dos funcionários. Os registros são, no mínimo: Nome, sobrenome, profissao e data de nascimento.\n","\n","- Seu sistema deve ser capaz de fazer as operações básicas de um banco de dados: Criar, Ler, atualizar e deletar, ou seja:\n","- Criar: deve ser possível receber novos registros pelo usuario e armazenar no seu sistema\n","- Ler: O usuário deve conseguir encontrar o registro completo, procurando pelo nome ou pela profissao. Sejam apresentados os dados de forma que o nome tenha as primeiras letras maiusculas. O numero deve ser apresentado no formato \"(dd)1234-5678\". E apresentar de forma mais visual possivel.\n","- atualizar: O usuario deve conseguir atualizar o registro, buscando pelo numero de telefone\n","- deletar: O usuario deve conseguir deletar o registro buscando pelo numero do telefone\n","\n","- Cada operação deverá ser chamada por uma função própria\n","- Deverá ser possível chamar uma unica função chamada `menu()` que vai permitir ao usuario a chamar as diferentes operações"],"metadata":{"id":"rgFgxp1m7rkv"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"PEgMLGTC7m_-"},"outputs":[],"source":[]},{"cell_type":"code","source":[],"metadata":{"id":"drn_a3WPBLC1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Bonus 1"],"metadata":{"id":"0xujOucwBLdZ"}},{"cell_type":"markdown","source":["Quando for chamada a operação de leitura, mostrar quantos dias faltam para o aniversário pro colaborador daquele registro. Dica: use a lib `datetime`"],"metadata":{"id":"96Ko17FHBOC3"}},{"cell_type":"code","source":[],"metadata":{"id":"4bvLnJiJBMhG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Bonus 2"],"metadata":{"id":"7z_EGlMMBY_M"}},{"cell_type":"markdown","source":["Receber o CEP do colaborador e armazenar seu endereco."],"metadata":{"id":"g_pyI-zZBbB5"}},{"cell_type":"code","source":["def recebe_cep_retorna_endereco(cep:str) -> list:\n","  import requests\n","  cep = cep.replace(\"-\", \"\").replace(\".\", \"\").replace(\" \", \"\")\n","  if len(cep) == 8:\n","      link = f'https://viacep.com.br/ws/{cep}/json/'\n","      requisicao = requests.get(link)\n","      dic_requisicao = requisicao.json()\n","      uf = dic_requisicao['uf']\n","      cidade = dic_requisicao['localidade']\n","      bairro = dic_requisicao['bairro']\n","      logradouro = dic_requisicao['logradouro']\n","      return([uf, cidade, bairro, logradouro])\n","  else:\n","      raise Exception('CEP Inválido')"],"metadata":{"id":"ItlBckEIBaGf"},"execution_count":null,"outputs":[]}]}