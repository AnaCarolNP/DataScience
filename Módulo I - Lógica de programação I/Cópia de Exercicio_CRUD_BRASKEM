{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Parabéns!\n","\n","Você foi contratado para trabalhar no RH de um empresa Multinacional como trainee! Na sua primeira semana, você vai trabalhar no RH.\n","\n","Sua primeira demanda é criar um sistema que cumpra os seguintes requisitos:\n","\n","- Seu sistema deverá armazenar os registros dos funcionários. Os registros são, no mínimo: Nome, sobrenome, telefone, profissao e data de nascimento.\n","\n","- Seu sistema deve ser capaz de fazer as operações básicas de um banco de dados: Criar, Ler, atualizar e deletar, ou seja:\n","- Criar: deve ser possível receber novos registros pelo usuario e armazenar no seu sistema\n","- Ler: O usuário deve conseguir encontrar o registro completo, procurando pelo nome ou pela profissao. Sejam apresentados os dados de forma que o nome tenha as primeiras letras maiusculas. O numero deve ser apresentado no formato \"(dd)1234-5678\". E apresentar de forma mais visual possivel.\n","- atualizar: O usuario deve conseguir atualizar o registro, buscando pelo numero de telefone\n","- deletar: O usuario deve conseguir deletar o registro buscando pelo numero do telefone\n","\n","- Cada operação deverá ser chamada por uma função própria\n","- Deverá ser possível chamar uma unica função chamada `menu()` que vai permitir ao usuario a chamar as diferentes operações"],"metadata":{"id":"rgFgxp1m7rkv"}},{"cell_type":"code","source":["#Seu sistema deverá armazenar os registros dos funcionários. Os registros são, no mínimo: Nome, sobrenome, telefone, profissao e data de nascimento.\n","cadastro = []\n","\n","def adicionar(): \n","  while True:\n","    nome = str(input('Nome: '))\n","    sobrenome = str(input('Sobrenome: '))\n","    telefone = str(input('Telefone: '))\n","    profissao = str(input('Profissão: '))\n","    data_de_nascimento = str(input('Data de nascimento (coloque no formato dd/mm/aaaa): '))\n","    resp = input('Tem mais algum cadastro para ser feito? [S/N] ')\n","\n","    cadastro.append([nome, sobrenome, telefone, profissao, data_de_nascimento])\n","\n","    if resp in 'Nn':\n","        break\n","\n","  print(cadastro)\n","\n","\n"],"metadata":{"id":"drn_a3WPBLC1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["'''Ler: O usuário deve conseguir encontrar o registro completo, procurando pelo nome ou pela profissao. \n","Sejam apresentados os dados de forma que o nome tenha as primeiras letras maiusculas. \n","O numero deve ser apresentado no formato \"(dd)1234-5678\". \n","E apresentar de forma mais visual possivel.'''\n","\n","def visualizar_cadastro(cadastro):\n","    nome_funcionario = input('Digite o nome ou a profissão do funcionário que deseja encontrar: ')\n","\n","    for funcionario in cadastro:\n","        if nome_funcionario in funcionario:\n","            resultado = f'{(\"=\" * 30)} \\n' \\\n","                        f'Nome: {funcionario[0].capitalize()} \\n' \\\n","                        f'Sobrenome: {funcionario[1].capitalize()} \\n' \\\n","                        f'Telefone: ({funcionario[2][:2]}){funcionario[2][2:6]}-{funcionario[2][-4:]} \\n' \\\n","                        f'Profissão: {funcionario[3]} \\n' \\\n","                        f'Data de Nascimento: {funcionario[4]} \\n' \\\n","                        f'{(\"=\" * 30)}'\n","\n","            print(resultado)\n","\n"],"metadata":{"id":"RBPhDfhbsCj7"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PEgMLGTC7m_-"},"outputs":[],"source":["#atualizar: O usuario deve conseguir atualizar o registro, buscando pelo numero de telefone\n","\n","def buscar_cadastro(cadastro, telefone):\n","    for funcionario in cadastro:\n","        if telefone in funcionario:\n","            return funcionario\n","    return None\n","\n","def atualizar_cadastro(cadastro):\n","    telefone_funcionario = input('Digite o telefone do funcionário que deseja encontrar (sem parênteses): ')\n","\n","    funcionario_encontrado = buscar_cadastro(cadastro, telefone_funcionario)\n","    if funcionario_encontrado is None:\n","        print('Funcionário não encontrado.')\n","        return\n","\n","    resultado_formatado = f'Nome: {funcionario_encontrado[0].capitalize()} \\n' \\\n","                          f'Sobrenome: {funcionario_encontrado[1].capitalize()} \\n' \\\n","                          f'Telefone: ({funcionario_encontrado[2][:2]}){funcionario_encontrado[2][2:6]}-{funcionario_encontrado[2][-4:]} \\n' \\\n","                          f'Profissão: {funcionario_encontrado[3]} \\n' \\\n","                          f'Data de Nascimento: {funcionario_encontrado[4]}'\n","    print(resultado_formatado)\n","\n","    resp = input('Os dados que deseja alterar são deste funcionário? [S/N]: ')\n","    if resp.upper() != 'S':\n","        return\n","\n","    campo = int(input('Qual campo deseja alterar? \\n'\n","                      '1- Nome \\n'\n","                      '2- Sobrenome \\n'\n","                      '3- Telefone \\n'\n","                      '4- Profissão \\n'\n","                      '5- Data de Nascimento \\n'))\n","\n","    if campo == 1:\n","        novo_nome = input('Digite o novo nome: ')\n","        funcionario_encontrado[0] = novo_nome\n","    elif campo == 2:\n","        novo_sobrenome = input('Digite o novo sobrenome: ')\n","        funcionario_encontrado[1] = novo_sobrenome\n","    elif campo == 3:\n","        novo_telefone = input('Digite o novo telefone: ')\n","        funcionario_encontrado[2] = novo_telefone\n","    elif campo == 4:\n","        nova_profissao = input('Digite a nova profissão: ')\n","        funcionario_encontrado[3] = nova_profissao\n","    elif campo == 5:\n","        nova_data_nascimento = input('Digite a nova data de nascimento: ')\n","        funcionario_encontrado[4] = nova_data_nascimento\n","    else:\n","        print('Opção inválida!')\n","\n","    resultado_formatado = f'Nome: {funcionario_encontrado[0].capitalize()} \\n' \\\n","                          f'Sobrenome: {funcionario_encontrado[1].capitalize()} \\n' \\\n","                          f'Telefone: ({funcionario_encontrado[2][:2]}){funcionario_encontrado[2][2:6]}-{funcionario_encontrado[2][-4:]} \\n' \\\n","                          f'Profissão: {funcionario_encontrado[3]} \\n' \\\n","                          f'Data de Nascimento: {funcionario_encontrado[4]}'\n","    print('Dados atualizados:')\n","    print(resultado_formatado)"]},{"cell_type":"code","source":["#deletar: O usuario deve conseguir deletar o registro buscando pelo numero do telefone\n","\n","def deletar_cadastro(cadastro):\n","    telefone_funcionario = input('Digite o telefone do funcionário que deseja deletar (sem parênteses): ')\n","\n","    funcionario_encontrado = buscar_cadastro(cadastro, telefone_funcionario)\n","\n","    resultado_formatado = f'Nome: {funcionario_encontrado[0].capitalize()} \\n' \\\n","                          f'Sobrenome: {funcionario_encontrado[1].capitalize()} \\n' \\\n","                          f'Telefone: ({funcionario_encontrado[2][:2]}){funcionario_encontrado[2][2:6]}-{funcionario_encontrado[2][-4:]} \\n' \\\n","                          f'Profissão: {funcionario_encontrado[3]} \\n' \\\n","                          f'Data de Nascimento: {funcionario_encontrado[4]}'\n","    print(resultado_formatado)\n","\n","    resposta = input('Deseja realmente deletar esse funcionário? [S/N]: ')\n","\n","    if resposta in 'Ss':\n","        cadastro.remove(funcionario_encontrado)\n","        print('Funcionário deletado com sucesso.')\n","    print(cadastro)\n","\n","    if funcionario_encontrado is None:\n","        print('Funcionário não encontrado.')"],"metadata":{"id":"jUPmsU1ntUG4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Deverá ser possível chamar uma unica função chamada menu() que vai permitir ao usuario a chamar as diferentes operações\n","\n","def menu():\n","    opcao = int(input('Olá, seja bem vindo(a) ao Cadastro RH. \\n'\n","                  'Por favor, digite o número abaixo de acordo com o que você precisa: \\n'\n","                  '1- Adicionar novo funcionário; \\n'\n","                  '2- Visualizar as informações cadastradas de um funcionário; \\n'\n","                  '3- Alterar informações de um funcionário; \\n'\n","                  '4- Deletar o cadastro de um funcionário;'))\n","\n","\n","    if opcao == 1:\n","        return adicionar()\n","\n","    elif opcao == 2:\n","        return visualizar_cadastro(cadastro)\n","\n","    elif opcao == 3:\n","        return atualizar_cadastro(cadastro)\n","\n","    elif opcao == 4:\n","        return deletar_cadastro(cadastro)\n","\n","    else:\n","        print('Opção inválida!')\n","        menu()"],"metadata":{"id":"X4nxPgZgp7gd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Bonus 1"],"metadata":{"id":"0xujOucwBLdZ"}},{"cell_type":"markdown","source":["Quando for chamada a operação de leitura, mostrar quantos dias faltam para o aniversário pro colaborador daquele registro. Dica: use a lib `datetime`"],"metadata":{"id":"96Ko17FHBOC3"}},{"cell_type":"code","source":["from datetime import datetime, date\n","\n","\n","def visualizar_cadastro_bonus(cadastro):\n","    nome_funcionario = input('Digite o nome ou a profissão do funcionário que deseja encontrar: ')\n","\n","    for funcionario in cadastro:\n","        if nome_funcionario in funcionario:\n","            resultado = f'{(\"=\" * 30)} \\n' \\\n","                        f'Nome: {funcionario[0].capitalize()} \\n' \\\n","                        f'Sobrenome: {funcionario[1].capitalize()} \\n' \\\n","                        f'Telefone: ({funcionario[2][:2]}){funcionario[2][2:6]}-{funcionario[2][-4:]} \\n' \\\n","                        f'Profissão: {funcionario[3]} \\n' \\\n","                        f'Data de Nascimento: {datetime.strptime(funcionario[4],\"%d/%m/%Y\")} \\n' \\\n","                        f'{(\"=\" * 30)}'\n","            nascimento = datetime.strptime(funcionario[4],\"%d/%m/%Y\").date()\n","            hoje = date.today()\n","            aniversario_atual = date(hoje.year, nascimento.month, nascimento.day)\n","            if aniversario_atual > hoje:\n","                dias_para_aniversario = (aniversario_atual - hoje).days\n","            elif aniversario_atual < hoje:\n","                dias_para_aniversario = (aniversario_atual - hoje).days + 365\n","            else:\n","                print('Hoje é o dia do aniversário do funcionário!')\n","                dias_para_aniversario = 0\n","\n","            print(resultado)\n","            print(f'Faltam {dias_para_aniversario} dias para o aniversário de {funcionario[0].capitalize()}')\n","\n","cadastro = [\n","    ['João', 'Silva', '111111111', 'Engenheiro', '01/01/1990'],\n","    ['Maria', 'Santos', '222222222', 'Analista', '06/12/1995'],\n","    ['Carlos', 'Ferreira', '333333333', 'Desenvolvedor', '03/03/1985']\n","]\n","\n","visualizar_cadastro_bonus(cadastro)\n","\n","\n"],"metadata":{"id":"4bvLnJiJBMhG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Bonus 2"],"metadata":{"id":"7z_EGlMMBY_M"}},{"cell_type":"markdown","source":["Receber o CEP do colaborador e armazenar seu endereco."],"metadata":{"id":"g_pyI-zZBbB5"}},{"cell_type":"code","source":["def recebe_cep_retorna_endereco(cep:str) -> list:\n","  import requests\n","  cep = cep.replace(\"-\", \"\").replace(\".\", \"\").replace(\" \", \"\")\n","  if len(cep) == 8:\n","      link = f'https://viacep.com.br/ws/{cep}/json/'\n","      requisicao = requests.get(link)\n","      dic_requisicao = requisicao.json()\n","      uf = dic_requisicao['uf']\n","      cidade = dic_requisicao['localidade']\n","      bairro = dic_requisicao['bairro']\n","      logradouro = dic_requisicao['logradouro']\n","      return([uf, cidade, bairro, logradouro])\n","  else:\n","      raise Exception('CEP Inválido')"],"metadata":{"id":"ItlBckEIBaGf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def recebe_cep_retorna_endereco(cep):\n","    import requests\n","    cep = cep.replace(\"-\", \"\").replace(\".\", \"\").replace(\" \", \"\")\n","    if len(cep) == 8:\n","        link = f'https://viacep.com.br/ws/{cep}/json/'\n","        requisicao = requests.get(link)\n","        dic_requisicao = requisicao.json()\n","        uf = dic_requisicao['uf']\n","        cidade = dic_requisicao['localidade']\n","        bairro = dic_requisicao['bairro']\n","        logradouro = dic_requisicao['logradouro']\n","        return [uf, cidade, bairro, logradouro]\n","    else:\n","        raise Exception('CEP Inválido')\n","\n","def buscar_cadastro(cadastro, telefone):\n","    for funcionario in cadastro:\n","        if telefone in funcionario:\n","            return funcionario\n","    return None\n","\n","def adicionar_endereco():\n","    telefone_funcionario = input('Digite o telefone do funcionário que deseja adicionar o endereço (sem parênteses): ')\n","\n","    funcionario_encontrado = buscar_cadastro(cadastro, telefone_funcionario)\n","    if funcionario_encontrado is None:\n","        print('Funcionário não encontrado.')\n","        return\n","\n","    resultado_formatado = f'Nome: {funcionario_encontrado[0].capitalize()} \\n' \\\n","                          f'Sobrenome: {funcionario_encontrado[1].capitalize()} \\n' \\\n","                          f'Telefone: ({funcionario_encontrado[2][:2]}){funcionario_encontrado[2][2:6]}-{funcionario_encontrado[2][-4:]} \\n' \\\n","                          f'Profissão: {funcionario_encontrado[3]} \\n' \\\n","                          f'Data de Nascimento: {funcionario_encontrado[4]}'\n","    print(resultado_formatado)\n","\n","    resp = input('Confirma se é este funcionário? [S/N]: ')\n","    if resp.upper() != 'S':\n","        return\n","    endereco = input('Digite o CEP da residência do funcionário: ')\n","    informacao = recebe_cep_retorna_endereco(endereco)\n","    funcionario_encontrado.append(informacao)\n","    print(cadastro)\n","\n","cadastro = [\n","    ['João', 'Silva', '111111111', 'Engenheiro', '01/01/1990'],\n","    ['Maria', 'Santos', '222222222', 'Analista', '06/12/1995'],\n","    ['Carlos', 'Ferreira', '333333333', 'Desenvolvedor', '03/03/1985']\n","]\n","\n","adicionar_endereco()\n"],"metadata":{"id":"wmKLXpO-4Urs"},"execution_count":null,"outputs":[]}]}